Angel One’s SmartAPI enforces strict rate limits across its REST and WebSocket endpoints to ensure fair usage and system stability. Limits are applied primarily on a per-second basis, with additional caps per minute and per hour for certain endpoints 
smartapi.angelbroking.com
. Authentication and profile endpoints allow between 1–3 requests per second, while order operations can sustain up to 20 requests per second (with 500/minute and 1,000/hour caps) 
smartapi.angelbroking.com
. Market data feeds have been streamlined into bulk-fetch calls—e.g., the /quote endpoint now supports up to 50 symbols per request but only 1 request per second 
smartapi.angelbroking.com
. Historical data APIs such as getCandleData are limited to 3 requests per second with an effective 180-per-minute ceiling 
smartapi.angelbroking.com
smartapi.angelbroking.com
. WebSocket streaming is restricted to 3 concurrent connections per client code 
smartapi.angelbroking.com
. Exceeding these thresholds returns “Access denied because of exceeding access rate” errors, often accompanied by support IDs. To avoid failures, it’s essential to implement client-side throttling, bulk requests, caching, and exponential backoff with jitter while observing both per-second and additional per-minute/hour caps.

1. Authentication & User Profile Endpoints
These endpoints establish your session and retrieve user details. Exceeding their limits can disrupt all downstream operations.

Login by Password (/rest/auth/angelbroking/user/v1/loginByPassword): 1 request/sec 
smartapi.angelbroking.com
.

Generate Tokens (/rest/auth/angelbroking/jwt/v1//generateTokens): 1 request/sec; 1,000 requests/hour 
smartapi.angelbroking.com
.

Get Profile (/rest/secure/angelbroking/user/v1/getProfile): 3 requests/sec; 1,000 requests/hour 
smartapi.angelbroking.com
.

Logout (/rest/secure/angelbroking/user/v1/logout): 1 request/sec 
smartapi.angelbroking.com
.

Get RMS (/rest/secure/angelbroking/user/v1/getRMS): 2 requests/sec 
smartapi.angelbroking.com
.

Multiple Client Login is also limited to 1 request/sec per client code 
smartapi.angelbroking.com
.

2. Order Management Endpoints
High-throughput order operations are generous but still bounded to prevent misuse.

Endpoint	Per Second	Per Minute	Per Hour
Place Order (placeOrder)	20	500	1,000
Modify Order (modifyOrder)	20	500	1,000
Cancel Order (cancelOrder)	20	500	1,000
Convert Position (convertPosition)	10	500	5,000
Get LTP Data (getLtpData)	10	500	5,000
Get Order Book (getOrderBook)	1	—	—
Get Position (getPosition)	1	—	—
Get Trade Book (getTradeBook)	1	—	—
Search Scrip (searchScrip)	1	—	—
All from the official rate-limit announcement 
smartapi.angelbroking.com
 and summarized in third-party reviews 
chittorgarh.com
.			

3. Market Data & Historical Data Limits
Live Market Data (/quote)
Bulk Fetch: Up to 50 symbols per call.

Rate: 1 request/sec 
smartapi.angelbroking.com
.

Historical Candle Data (getCandleData)
Rate: 3 requests/sec (primary).

Effective Minute Cap: 180 requests/minute (3/sec × 60), even if documentation mentions 500/minute 
smartapi.angelbroking.com
smartapi.angelbroking.com
.

Error: Exceeding these leads to “Access denied because of exceeding access rate” 
smartapi.angelbroking.com
.

WebSocket Streaming
Connections: Max 3 simultaneous connections per client code.

No additional cap on message rate once connected 
smartapi.angelbroking.com
.

4. Best Practices to Avoid Rate Limit Failures
Client-Side Throttling: Enforce per-second limits in your HTTP client (e.g., token bucket algorithms) 
smartapi.angelbroking.com
.

Bulk Requests: Use the 50-symbol bulk fetch capability for live data instead of individual LTP calls 
smartapi.angelbroking.com
.

Caching & Deduplication: Cache static data (e.g., instrument lists) and dedupe frequent identical calls.

Backoff & Jitter: Implement exponential backoff with random jitter on 429-like responses to avoid thundering-herd retries 
medium.com
.

Monitor & Log: Track your request counts, error responses, and support IDs to identify hotspots and tune your rate-limiter.

5. Handling Rate Limit Errors
Error Code: Typically returns an HTTP 429 or an “Access denied because of exceeding access rate” message with a support ID.

Retry Strategy:

Respect any Retry-After header if provided.

Use incremental backoff (e.g., 500 ms × 2ⁿ) with a cap (e.g., 30 s).

Introduce jitter to spread retries.

Alerting: Set up alerts when error rates exceed a threshold to proactively adjust your throttling parameters.

By aligning your request patterns with these documented limits—leveraging bulk endpoints, respecting both per-second and additional caps, and implementing robust retry logic—you can maintain seamless live data feeds and order operations on Angel One’s SmartAPI platform.